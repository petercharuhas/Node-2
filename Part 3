Bug #1: Authentication Token Verification
Description: In middleware/auth.js, authUser uses jwt.decode() instead of jwt.verify(), which doesn't validate the token signature, allowing potentially tampered tokens.


// TESTS BUG #1
test("should not allow invalid tokens", async function() {
  const response = await request(app)
    .get("/users")
    .send({ _token: "invalid.token.here" });
  expect(response.statusCode).toBe(401);
});

// FIXES BUG #1
function authUser(req, res, next) {
  try {
    const token = req.body._token || req.query._token;
    if (token) {
      let payload = jwt.verify(token, SECRET_KEY); // Changed from jwt.decode
      req.curr_username = payload.username;
      req.curr_admin = payload.admin;
    }
    return next();
  } catch (err) {
    err.status = 401;
    return next(err);
  }
}
Bug #2: Missing Await in Login
Description: In routes/auth.js, the login route doesn't await the User.authenticate() call, causing potential authentication failures.


// TESTS BUG #2
test("should properly await authentication", async function() {
  const response = await request(app)
    .post("/auth/login")
    .send({
      username: "u1",
      password: "wrong"
    });
  expect(response.statusCode).toBe(401);
});

// FIXES BUG #2
router.post('/login', async function(req, res, next) {
  try {
    const { username, password } = req.body;
    let user = await User.authenticate(username, password); // Added await
    const token = createTokenForUser(username, user.admin);
    return res.json({ token });
  } catch (err) {
    return next(err);
  }
});
Bug #3: Improper Error Throwing
Description: In models/user.js, the get() method doesn't properly throw the error.


// TESTS BUG #3
test("should properly throw 404 for non-existent user", async function() {
  const response = await request(app)
    .get("/users/nonexistent")
    .send({ _token: tokens.u1 });
  expect(response.statusCode).toBe(404);
});

// FIXES BUG #3
static async get(username) {
  const result = await db.query(
    `SELECT username,
              first_name,
              last_name,
              email,
              phone
       FROM users
       WHERE username = $1`,
    [username]
  );

  const user = result.rows[0];

  if (!user) {
    throw new ExpressError('No such user', 404); // Added throw
  }

  return user;
}
Bug #4: Missing Await in Delete
Description: In routes/users.js, the delete route doesn't await the User.delete() call.


// TESTS BUG #4
test("should properly await user deletion", async function() {
  const response = await request(app)
    .delete("/users/u1")
    .send({ _token: tokens.u3 });
  expect(response.statusCode).toBe(200);
  
  // Verify user is actually deleted
  const checkUser = await request(app)
    .get("/users/u1")
    .send({ _token: tokens.u3 });
  expect(checkUser.statusCode).toBe(404);
});

// FIXES BUG #4
router.delete('/:username', authUser, requireAdmin, async function(
  req,
  res,
  next
) {
  try {
    await User.delete(req.params.username); // Added await
    return res.json({ message: 'deleted' });
  } catch (err) {
    return next(err);
  }
});
